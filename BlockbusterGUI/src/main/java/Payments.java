
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author tom
 */
public class Payments extends javax.swing.JFrame {

    public enum Modes {
        NEW,
        UPDATE
    }
    public Modes mode = Modes.NEW;
    public Connection connection;

    /**
     * Creates new form Payments
     */
    public Payments() {
        initComponents();
        refresh();
        mode = Modes.NEW;
    }

    private boolean connect() {
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ChampionsProject", "root", "root");
            return true;
        } catch (Exception ex) {
            System.out.println("error - database did not connect\n" + ex.getMessage());
        }
        return false;
    }

    private boolean checkId(int id) {
        try {
            if (connect()) {
                String query = "Select * from payments where paymentID =" + id;
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                if (!rs.next()) {
                    //No rows exist so return true
                    connection.close();
                    return false;
                } else {
                    connection.close();
                    return true;
                }
            }
        } catch (Exception ex) {
            System.out.println("Error connecting to the database\n " + ex.getMessage());
            return true;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        paymentList = new javax.swing.JList<>();
        refreshButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        paymentId = new javax.swing.JTextField();
        rentalId = new javax.swing.JTextField();
        creditId = new javax.swing.JTextField();
        paid = new javax.swing.JTextField();
        dreceived = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("payments table");

        paymentList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        paymentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                paymentListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(paymentList);

        refreshButton.setText("Refresh");

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Payment ID:");

        jLabel3.setText("Credit ID:");

        jLabel4.setText("Paid:");

        jLabel5.setText("Date Received:");

        jLabel6.setText("Rental ID:");

        rentalId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentalIdActionPerformed(evt);
            }
        });

        paid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(newButton)
                .addGap(59, 59, 59)
                .addComponent(saveButton)
                .addGap(55, 55, 55)
                .addComponent(deleteButton)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(refreshButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(jLabel2)))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dreceived, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                    .addComponent(paid)
                    .addComponent(creditId)
                    .addComponent(rentalId)
                    .addComponent(paymentId))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(paymentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(rentalId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(creditId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(paid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(dreceived, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton)
                    .addComponent(saveButton)
                    .addComponent(deleteButton))
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rentalIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentalIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rentalIdActionPerformed

    private void paidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paidActionPerformed

    private void paymentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_paymentListValueChanged
        // TODO add your handling code here:
        int index = paymentList.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        String s = (String) paymentList.getSelectedValue();
        System.out.println("Value Selected: " + s);
        String[] parts = s.split("-");
        String ID = parts[0].trim();
        System.out.println("ID: " + ID);
        updateform(ID);
        mode = Modes.UPDATE;
    }//GEN-LAST:event_paymentListValueChanged

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        // TODO add your handling code here:
        rentalId.setText("");
        creditId.setText("");
        paid.setText("");
        dreceived.setText("");
        paymentId.setText("");
        mode = Modes.NEW;
        System.out.println("Mode: " + mode.toString());
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        int id = 0;
        try {
            id = Integer.parseInt(paymentId.getText());

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(), "Error - id is not a number");
            System.out.println("Error - id is not a number");
        }

        
        int _rentalId = Integer.parseInt(rentalId.getText());
        int _creditId = Integer.parseInt(creditId.getText());
        String _paid = String.valueOf(paid.getText());
        String _date = dreceived.getText();

        System.out.println("\nId: " + id);

        if (mode == Modes.NEW) {
            
            System.out.println("Save " + mode.toString() + " mode");
            if (checkId(id)) {
                JOptionPane.showMessageDialog(new JFrame(), "Error - paymentId alreary exist, choose a new Id");
            } else {
                try {
                    if (connect()) {
                        String query = "Insert into payments (paymentID, rentalID, creditID, paid, date_received)"
                                + "values(?,?,?,?,?)";
                        PreparedStatement stmnt = connection.prepareStatement(query);
                        stmnt.setInt(1, id);
                        stmnt.setInt(2, _rentalId);
                        stmnt.setInt(3, _creditId);
                        stmnt.setString(4, _paid);
                        stmnt.setString(5, _date);
                        
                        int row = stmnt.executeUpdate();
                        System.out.println("Rows affected: " + row);//1
                        JOptionPane.showMessageDialog(new JFrame(), "PaymentID Added: " + id + " to the Database");
                        connection.close();
                    } else {
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(new JFrame(), "Error - could not connect to the Database2");
                }
            }
        } else if (mode == Modes.UPDATE) {
            System.out.println("Save " + mode.toString() + " mode");
            try {
                if (connect()) {
                    String query = "Update payments set paymentID=?, rentalID=?, creditID=?, paid=?, date_received=?";

                    PreparedStatement stmnt = connection.prepareStatement(query);
                    stmnt.setInt(1, id);
                    stmnt.setInt(2, _rentalId);
                    stmnt.setInt(3, _creditId);
                    stmnt.setString(4, _paid);
                    stmnt.setString(5, _date);

                    int row = stmnt.executeUpdate();
                    System.out.println("Rows affected: " + row);//1
                    JOptionPane.showMessageDialog(new JFrame(), "Udated PaymentID Added: " + id + " to the Database");
                    connection.close();
                } else {
                    JOptionPane.showMessageDialog(new JFrame(), "Error - Could not connect to database3");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(new JFrame(), "Error - could not connect to the Database4");
            }

        }
        // Auto refresh after any operation
        refresh();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
         try{
            if(connect()){
                String query = "Delete from payments where paymentID=?";
                PreparedStatement stmnt = connection.prepareStatement(query);
                stmnt.setInt(1, Integer.parseInt(paymentId.getText()));
                stmnt.executeUpdate();
                JOptionPane.showMessageDialog(new JFrame(), "Deletion Successfull");
                refresh();
                connection.close();
            }
            
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(), "Error - could not connect to the Database");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    public void refresh() {
        try {
            if (connect()) {
                String query = "select * from payments";

                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                DefaultListModel listModel;
                listModel = new DefaultListModel();
                while (rs.next()) {
                    listModel.addElement(rs.getString("paymentID") + " - " + rs.getBoolean("paid"));
                }
                paymentList.setModel(listModel);

                connection.close();
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    // returns new addressid, based on the highest value id currently in DB
    private int newPaymentId() {
        try {
            if (connect()) {
                //prepared statement not required as their is no direct user entry
                String query = "Select max(paymentID) as count from payments";
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                if (rs.next()) {
                    int newId = rs.getInt("count");
                    connection.close();
                    return newId + 1;
                }

            }
        } catch (Exception ex) {
            System.out.println("error connecting to the database\n" + ex.getMessage());

        }
        return 0;
    }

    // returns new addressid, based on the highest value id currently in DB
    private int newRentalId() {
        try {
            if (connect()) {
                //prepared statement not required as their is no direct user entry
                String query = "Select max(rentalID) as count from rentals";
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                if (rs.next()) {
                    int newId = rs.getInt("count");
                    connection.close();
                    return newId + 1;
                }

            }
        } catch (Exception ex) {
            System.out.println("error connecting to the database\n" + ex.getMessage());

        }
        return 0;
    }
    // returns new addressid, based on the highest value id currently in DB

    private int newCreditInfo() {

        try {
            if (connect()) {
                //prepared statement not required as their is no direct user entry
                String query = "Select max(creditID) as count from creditInfo";
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                if (rs.next()) {
                    int newId = rs.getInt("count");
                    connection.close();
                    return newId + 1;
                }

            }
        } catch (Exception ex) {
            System.out.println("error connecting to the database\n" + ex.getMessage());

        }
        return 0;
    }

    //Fills in text boxes when a user is selected from the list
    public void updateform(String id) {
        try {
            if (connect()) {

                String query = "select * from payments "
                        + "natural join rentals "
                        + "natural join creditInfo "
                        + "where paymentID=" + id;

                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                while (rs.next()) {
                    paymentId.setText(rs.getString("paymentID"));
                    rentalId.setText(rs.getString("rentalID"));
                    creditId.setText(rs.getString("creditID"));
                    paid.setText(rs.getString("paid"));
                    dreceived.setText(rs.getString("date_received"));
                }

                connection.close();
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Payments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Payments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Payments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Payments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Payments().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField creditId;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField dreceived;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newButton;
    private javax.swing.JTextField paid;
    private javax.swing.JTextField paymentId;
    private javax.swing.JList<String> paymentList;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField rentalId;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}

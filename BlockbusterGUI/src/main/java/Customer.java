
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 * @author Team Champions
 */
public class Customer extends javax.swing.JFrame {

    public enum Modes {
        NEW,
        UPDATE
    }
    public Modes mode = Modes.NEW;
    public Connection connection;

    /**
     * Creates new form Customer
     */
    public Customer() {
        initComponents();
        refresh();
        mode = Modes.NEW;
    }

    private boolean connect() {
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/ChampionsProject", "root", "root");
            return true;
        } catch (Exception ex) {
            System.out.println("error - database did not connect\n" + ex.getMessage());
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        insertButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        userIdLabel = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        lastNameTextField = new javax.swing.JTextField();
        phoneTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        addressTextField = new javax.swing.JTextField();
        aptTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cityTextField = new javax.swing.JTextField();
        stateTextField = new javax.swing.JTextField();
        zipTextField = new javax.swing.JTextField();
        joinDateTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Customer Table");

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        userList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        userList.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                userListComponentResized(evt);
            }
        });
        userList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(userList);

        insertButton.setText("New");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("User ID:");

        jLabel3.setText("First Name:");

        jLabel4.setText("Last Name:");

        jLabel5.setText("Phone:");

        jLabel6.setText("Address:");

        jLabel7.setText("Apt:");

        jLabel8.setText("City:");

        jLabel9.setText("State:");

        jLabel10.setText("Zip:");

        jLabel11.setText("Join Date:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(insertButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(refreshButton)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(34, 34, 34)
                                .addComponent(userIdLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(firstNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lastNameTextField)
                                    .addComponent(phoneTextField))))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(saveButton)
                        .addGap(48, 48, 48)
                        .addComponent(deleteButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(joinDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addressTextField)
                                    .addComponent(aptTextField)
                                    .addComponent(cityTextField)
                                    .addComponent(stateTextField)
                                    .addComponent(zipTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))))))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(userIdLabel)
                            .addComponent(jLabel6)
                            .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(refreshButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(aptTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8))
                            .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(stateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(zipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(joinDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertButton)
                    .addComponent(saveButton)
                    .addComponent(deleteButton))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        refresh();
    }//GEN-LAST:event_refreshButtonActionPerformed
    // This method is called when new is selected
    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        // TODO add your handling code here:
        firstNameTextField.setText("");
        lastNameTextField.setText("");
        addressTextField.setText("");
        aptTextField.setText("");
        cityTextField.setText("");
        stateTextField.setText("");
        zipTextField.setText("");
        joinDateTextField.setText("");
        phoneTextField.setText("");
        int id = newUserId();
        userIdLabel.setText(String.valueOf(id));
        mode = Modes.NEW;

    }//GEN-LAST:event_insertButtonActionPerformed

    //This does nothing but I can't seem to delete it. Disregard
    private void userListComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_userListComponentResized
        // TODO add your handling code here: Why cant i remove this
    }//GEN-LAST:event_userListComponentResized

    //Called when a user is clicked on from the list
    private void userListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_userListValueChanged
        // TODO add your handling code here:
        int index = userList.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        String s = (String) userList.getSelectedValue();
        System.out.println("Value Selected: " + s);
        String[] parts = s.split("-");
        String ID = parts[0].trim();
        System.out.println("ID: " + ID);
        updateform(ID);
        mode = Modes.UPDATE;
    }//GEN-LAST:event_userListValueChanged

    //called when a user clicks the save button to update or save new user info
    //when creating new entries tables that are dependant on keys from other tables must be created after 
    //the tables they are dependant on.
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        int id = newUserId();
        int phoneId = newPhoneId();
        System.out.println(phoneId);
        int addressId = newAddressId();
        System.out.println(addressId);

        try {
            id = Integer.parseInt(userIdLabel.getText());
            System.out.println(id);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(), "Error - ID is not a number");
            System.out.println("Error - ID is not a number");
        }

        if (id != 0) {
            String _firstname = firstNameTextField.getText();
            String _lastname = lastNameTextField.getText();
            String _address = addressTextField.getText();
            String _city = cityTextField.getText();
            String _state = stateTextField.getText();
            String _zip = zipTextField.getText();
            String _number = phoneTextField.getText();
            String _apt = aptTextField.getText();
            String _joinDate = joinDateTextField.getText();

            if (mode == Modes.NEW) {
                if (checkId(id)) {
                    JOptionPane.showMessageDialog(new JFrame(), "Error - Already exists, choose a new ID");
                } else {
                    try {
                        if (connect()) {

                            String query = "Insert into address (addressID, street, apt, city, state, zipcode)"
                                    + "values(?,?,?,?,?,?)";
                            PreparedStatement stmnt = connection.prepareStatement(query);
                            stmnt.setInt(1, addressId);
                            stmnt.setString(2, _address);
                            stmnt.setString(3, _apt);
                            stmnt.setString(4, _city);
                            stmnt.setString(5, _state);
                            stmnt.setString(6, _zip);
                            int row = stmnt.executeUpdate();
                            System.out.println("Rows affected " + row);

                            query = "Insert into phone_number (phoneID, number)"
                                    + "values(?,?)";
                            stmnt = connection.prepareStatement(query);
                            stmnt.setInt(1, phoneId);
                            stmnt.setString(2, _number);
                            row = stmnt.executeUpdate();
                            System.out.println("Rows affected " + row);

                            query = "Insert into customer (customerID, addressID, cus_lname, cus_fname, phoneID, cus_joinDate)"
                                    + "values(?,?,?,?,?,?)";
                            stmnt = connection.prepareStatement(query);
                            stmnt.setInt(1, id);
                            stmnt.setInt(2, addressId);
                            stmnt.setString(3, _lastname);
                            stmnt.setString(4, _firstname);
                            stmnt.setInt(5, phoneId);
                            stmnt.setString(6, _joinDate);
                            row = stmnt.executeUpdate();
                            System.out.println("Rows affected " + row);

                            JOptionPane.showMessageDialog(new JFrame(), "Created user: " + id + " " + _firstname + " " + _lastname);

                            connection.close();

                        } else {
                            JOptionPane.showMessageDialog(new JFrame(), "Error - Could not connect to database");
                        }

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(new JFrame(), "Error - Could not complete insertion: " + ex);

                    }
                }
            } else if (mode == Modes.UPDATE) {
                try {
                    if (connect()) {
                        String query = "update customer set cus_lname=?, cus_fname=?, cus_joinDate=? where customerID=?";
                        PreparedStatement stmnt = connection.prepareStatement(query);
                        stmnt.setString(1, _lastname);
                        stmnt.setString(2, _firstname);
                        stmnt.setString(3, _joinDate);
                        stmnt.setInt(4, id);
                        int row = stmnt.executeUpdate();
                        System.out.println("Rows affected " + row);

                        query = "update address set street=?, apt=?, city=?, state=?, zipcode=? where addressID=?";
                        stmnt = connection.prepareStatement(query);
                        stmnt.setString(1, _address);
                        stmnt.setString(2, _apt);
                        stmnt.setString(3, _city);
                        stmnt.setString(4, _state);
                        stmnt.setString(5, _zip);
                        stmnt.setInt(6, getAddressID(id));
                        row = stmnt.executeUpdate();
                        System.out.println("Rows affected " + row);

                        query = "update phone_number set number=? where phoneID=?";
                        stmnt = connection.prepareStatement(query);
                        stmnt.setString(1, _number);
                        stmnt.setInt(2, getPhoneID(id));
                        row = stmnt.executeUpdate();
                        System.out.println("Rows affected " + row);

                        JOptionPane.showMessageDialog(new JFrame(), "Updated user: " + id + " " + _firstname + " " + _lastname);
                        connection.close();
                    } else {
                        JOptionPane.showMessageDialog(new JFrame(), "Error - Could not connect to database");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(new JFrame(), "Error - Could not complete insertion: " + ex);

                }

            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "Error - Initial value cannot be zero");
        }
        refresh();
    }//GEN-LAST:event_saveButtonActionPerformed

    private int getAddressID(int id) {
        try {
            String query = "Select addressID from customer where customerID =" + id;
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(query);
            if (rs.next()) {
                return rs.getInt("addressID");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(), "Error - Could not retreive ID: " + ex);

        }
        return 0;
    }

    private int getPhoneID(int id) {
        try {
            String query = "Select phoneID from customer where customerID =" + id;
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(query);
            if (rs.next()) {
                return rs.getInt("phoneID");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(), "Error - Could not retreive ID: " + ex);

        }
        return 0;
    }

    private int getCreditID(int id) {
        try {
            String query = "Select creditID from creditInfo where customerID =" + id;
            Statement sta = connection.createStatement();
            ResultSet rs = sta.executeQuery(query);
            if (rs.next()) {
                return rs.getInt("creditID");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(new JFrame(), "Error - Could not retreive ID: " + ex);

        }
        return 0;
    }

    //delete order matters. Any tables that are dependant on other tables must be deleted 
    //after the tables theyt are dependant on
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
            if (connect()) {
                int customerID = Integer.parseInt(userIdLabel.getText());
                int addressID = getAddressID(customerID);
                int phoneID = getPhoneID(customerID);

                String query = "delete from payments where creditID=?";
                PreparedStatement stmnt = connection.prepareStatement(query);
                stmnt.setInt(1, getCreditID(customerID));
                int row = stmnt.executeUpdate();
                System.out.println("Rows affected: " + row);

                query = "delete from rentals where customerID=?";
                stmnt = connection.prepareStatement(query);
                stmnt.setInt(1, customerID);
                row = stmnt.executeUpdate();
                System.out.println("Rows affected: " + row);

                query = "delete from creditInfo where customerID=?";
                stmnt = connection.prepareStatement(query);
                stmnt.setInt(1, customerID);
                row = stmnt.executeUpdate();
                System.out.println("Rows affected: " + row);

                query = "Delete from customer where customerID=?";
                stmnt = connection.prepareStatement(query);
                String _firstname = firstNameTextField.getText();
                String _lastname = lastNameTextField.getText();
                stmnt.setInt(1, customerID);
                row = stmnt.executeUpdate();
                System.out.println("Rows affected: " + row);

                query = "delete from phone_number where phoneID=?";
                stmnt = connection.prepareStatement(query);
                stmnt.setInt(1, phoneID);
                row = stmnt.executeUpdate();
                System.out.println("Rows affected: " + row);

                query = "delete from address where addressID=?";
                stmnt = connection.prepareStatement(query);
                stmnt.setInt(1, addressID);
                row = stmnt.executeUpdate();
                System.out.println("Rows affected: " + row);

                JOptionPane.showMessageDialog(new JFrame(), "Deleted user: " + customerID + " " + _firstname + " " + _lastname);
                firstNameTextField.setText("");
                lastNameTextField.setText("");
                addressTextField.setText("");
                aptTextField.setText("");
                cityTextField.setText("");
                stateTextField.setText("");
                zipTextField.setText("");
                joinDateTextField.setText("");
                phoneTextField.setText("");
                int id = newUserId();
                userIdLabel.setText(String.valueOf(id));
                mode = Modes.NEW;
                refresh();
                connection.close();
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "Error - Could not connect to database");

            }
        } catch (Exception ex) {
            System.out.println("Error - could not delete entry: " + ex);
        }
        // TODO add your handling code here:

    }//GEN-LAST:event_deleteButtonActionPerformed

    //Checks if id already exists
    private boolean checkId(int id) {
        try {
            if (connect()) {
                String query = "Select * from customer where customerID=" + id;
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                if (!rs.next()) {
                    connection.close();
                    return false;
                } else {
                    connection.close();
                    return true;
                }
            }
        } catch (Exception ex) {
            System.out.println("error connecting to the database\n" + ex.getMessage());
            return true;
        }
        return true;
    }

    //Fills in text boxes when a user is selected from the list
    public void updateform(String id) {
        try {
            if (connect()) {

                String query = "select * from customer "
                        + "natural join address "
                        + "natural join phone_number "
                        + "where customerID=" + id;

                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                while (rs.next()) {
                    userIdLabel.setText(rs.getString("customerID"));
                    firstNameTextField.setText(rs.getString("cus_fname"));
                    lastNameTextField.setText(rs.getString("cus_lname"));
                    phoneTextField.setText(rs.getString("number"));
                    addressTextField.setText(rs.getString("street"));
                    aptTextField.setText(rs.getString("apt"));
                    cityTextField.setText(rs.getString("city"));
                    stateTextField.setText(rs.getString("state"));
                    zipTextField.setText(rs.getString("zipcode"));
                    joinDateTextField.setText(rs.getString("cus_joinDate"));

                }

                connection.close();
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    // returns new userid, based on the highest value id currently in DB
    private int newUserId() {
        try {
            if (connect()) {
                //prepared statement not required as their is no direct user entry
                String query = "Select max(customerid) as count from customer";
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                if (rs.next()) {
                    int newId = rs.getInt("count");
                    connection.close();
                    return newId + 1;
                }

            }
        } catch (Exception ex) {
            System.out.println("error connecting to the database\n" + ex.getMessage());

        }
        return 0;
    }

    // returns new phoneid, based on the highest value id currently in DB
    private int newPhoneId() {
        try {
            if (connect()) {
                //prepared statement not required as their is no direct user entry
                String query = "Select max(phoneID) as count from phone_number";
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                if (rs.next()) {
                    int newId = rs.getInt("count");
                    connection.close();
                    return newId + 1;
                }

            }
        } catch (Exception ex) {
            System.out.println("error connecting to the database\n" + ex.getMessage());

        }
        return 0;
    }

    // returns new addressid, based on the highest value id currently in DB
    private int newAddressId() {
        try {
            if (connect()) {
                //prepared statement not required as their is no direct user entry
                String query = "Select max(addressID) as count from address";
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                if (rs.next()) {
                    int newId = rs.getInt("count");
                    connection.close();
                    return newId + 1;
                }

            }
        } catch (Exception ex) {
            System.out.println("error connecting to the database\n" + ex.getMessage());

        }
        return 0;
    }

    //Used to populate list from the database
    public void refresh() {
        try {
            //Connect to the database
            if (connect()) {

                //initialize the query
                String query = "select * from customer";
                //Create a new statement
                Statement sta = connection.createStatement();
                //Execute the Query and assign the results to the rs object
                ResultSet rs = sta.executeQuery(query);
                //instantiate a new DefaultListModel
                DefaultListModel listModel;
                listModel = new DefaultListModel();
                //Loop through the results and add the items to the lsit model
                while (rs.next()) {
                    listModel.addElement(rs.getString("customerID") + " - " + rs.getString("cus_fname") + " "
                            + rs.getString("cus_lname"));
                }
                //Set the model of the userList to the list Model
                userList.setModel(listModel);
                //Close the connection
                connection.close();
                //Catch any errors
            }
        } catch (Exception exception) {
            exception.printStackTrace();
            System.out.println("error");
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Customer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressTextField;
    private javax.swing.JTextField aptTextField;
    private javax.swing.JTextField cityTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField joinDateTextField;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JTextField phoneTextField;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField stateTextField;
    private javax.swing.JLabel userIdLabel;
    private javax.swing.JList<String> userList;
    private javax.swing.JTextField zipTextField;
    // End of variables declaration//GEN-END:variables
}
